// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory, freeList;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let freeList[0] = 16384 - 2048;
        let freeList[1] = null; 
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array found, cur, next, result;
        var int foundN, curN;

        let found = null;
        let foundN = 16384 - 2048;
        let cur = freeList;
        if (cur[1] = null) {
            let found = cur;
        } else {
            while (~(cur = null)) {
                let curN = cur[0] - 1;
                if (~(curN < size) & (curN < foundN)) {
                    let found = cur;
                    let foundN = curN;
                }
                let cur = cur[1];
            }
        }
        let result = found + 1;
        if (~(found = null)) {
            if (found[0] > (size + 3)) {
                let next = found + size + 1;
                let next[1] = found[1];
                let next[0] = found[0] - size - 1;
                let result[-1] = size + 1;
                let freeList = next;
            } else {
                let next = found[1];
                let result[-1] = found[0];
            }
            let found = next;
        }
        return result;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array pre, next;
        var int size;

        let size = o[-1];
        let o = o - 1;
        if (freeList > o) {
            let pre = null;
        } else {
            let pre = freeList;
            while (~(pre[1] = null) & (pre[1] < o)) {
                let pre = pre[1];
            }
        }
        if (pre = null) {
            let o[0] = size;
            let o[1] = freeList;
            let freeList = o;
        } else {
            if ((pre + pre[0]) = o) {
                let pre[0] = pre[0] + size;
                let o = pre;
            } else {
                let o[0] = size;
                let o[1] = pre[1];
                let pre[1] = o;
            }
        }
        if ((o + o[0]) = o[1]) {
            let next = o[1];
            let o[0] = o[0] + next[0];
            let o[1] = next[1];
        }
        return;
    }    
}

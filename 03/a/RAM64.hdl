// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[0..2], a=dmux8waya, b=dmux8wayb, c=dmux8wayc, d=dmux8wayd, e=dmux8waye, f=dmux8wayf, g=dmux8wayg, h=dmux8wayh);
    RAM8(in=in, load=dmux8waya, address=address[3..5], out=ram80);
    RAM8(in=in, load=dmux8wayb, address=address[3..5], out=ram81);
    RAM8(in=in, load=dmux8wayc, address=address[3..5], out=ram82);
    RAM8(in=in, load=dmux8wayd, address=address[3..5], out=ram83);
    RAM8(in=in, load=dmux8waye, address=address[3..5], out=ram84);
    RAM8(in=in, load=dmux8wayf, address=address[3..5], out=ram85);
    RAM8(in=in, load=dmux8wayg, address=address[3..5], out=ram86);
    RAM8(in=in, load=dmux8wayh, address=address[3..5], out=ram87);
    Mux8Way16(a=ram80, b=ram81, c=ram82, d=ram83, e=ram84, f=ram85, g=ram86, h=ram87, sel=address[0..2], out=out);
}